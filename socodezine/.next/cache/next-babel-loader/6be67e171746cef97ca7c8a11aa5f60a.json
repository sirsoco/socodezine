{"ast":null,"code":"var _jsxFileName = \"/Users/solo/Desktop/sirsoco/socodezine/socodezine/components/Launch/Launch.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport styles from './Launch.module.css';\nimport React, { useContext, useState } from \"react\";\nexport default function Launch() {\n  _s();\n\n  const {\n    0: date,\n    1: setDay\n  } = useState({\n    day: \"\",\n    hour: \"\",\n    minutes: \"\",\n    seconds: \"\"\n  });\n\n  const countFunc = () => {\n    //date for counter\n    var countDownDate = new Date('Sep 10, 2020 00:00:00').getTime(); //current date\n\n    var now = new Date().getTime(); //updated time\n\n    var distance = countDownDate - now; // Time calculations for days, hours, and minutes and seconds \n\n    var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n    var second = Math.floor(distance % (1000 * 60) / 1000);\n    setDay({\n      day: days,\n      hour: hours,\n      minutes: minutes,\n      seconds: second\n    });\n  }; // Update the count down every 1 second\n\n\n  var x = setInterval(countFunc);\n  return __jsx(\"body\", {\n    className: styles.background,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.timerdiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    className: styles.timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \" \", date.day, \"days. \", date.hour, \"hours. \", date.minutes, \"min. \", date.seconds, \"secs.\")));\n}\n\n_s(Launch, \"bYx3zxs6ztRGvbpGr9BfKwRtIvI=\");\n\n_c = Launch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Launch\");","map":{"version":3,"sources":["/Users/solo/Desktop/sirsoco/socodezine/socodezine/components/Launch/Launch.js"],"names":["styles","React","useContext","useState","Launch","date","setDay","day","hour","minutes","seconds","countFunc","countDownDate","Date","getTime","now","distance","days","Math","floor","hours","second","x","setInterval","background","timerdiv","timer"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC7B,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAiBH,QAAQ,CAAC;AAC5BI,IAAAA,GAAG,EAAE,EADuB;AAE5BC,IAAAA,IAAI,EAAE,EAFsB;AAG5BC,IAAAA,OAAO,EAAE,EAHmB;AAI5BC,IAAAA,OAAO,EAAE;AAJmB,GAAD,CAA/B;;AAOA,QAAMC,SAAS,GAAG,MAAM;AACnB;AACL,QAAIC,aAAa,GAAG,IAAIC,IAAJ,CAAS,uBAAT,EAAkCC,OAAlC,EAApB,CAFwB,CAGxB;;AACA,QAAIC,GAAG,GAAI,IAAIF,IAAJ,GAAWC,OAAX,EAAX,CAJwB,CAKxB;;AACA,QAAIE,QAAQ,GAAGJ,aAAa,GAAGG,GAA/B,CANwB,CAOxB;;AACA,QAAIE,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CAAX;AACA,QAAII,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CAAX,CAAZ;AACA,QAAIP,OAAO,GAAGS,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAAd;AACA,QAAIK,MAAM,GAAGH,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAAb;AACAV,IAAAA,MAAM,CAAC;AACHC,MAAAA,GAAG,EAAEU,IADF;AAEHT,MAAAA,IAAI,EAAEY,KAFH;AAGHX,MAAAA,OAAO,EAAEA,OAHN;AAIHC,MAAAA,OAAO,EAAEW;AAJN,KAAD,CAAN;AAMC,GAlBD,CAR6B,CA2B1B;;;AACH,MAAIC,CAAC,GAAGC,WAAW,CAACZ,SAAD,CAAnB;AAEA,SACI;AAAM,IAAA,SAAS,EAAEX,MAAM,CAACwB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAExB,MAAM,CAACyB,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAI,IAAA,SAAS,EAAEzB,MAAM,CAAC0B,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA+BrB,IAAI,CAACE,GAApC,YAA+CF,IAAI,CAACG,IAApD,aAAiEH,IAAI,CAACI,OAAtE,WAAoFJ,IAAI,CAACK,OAAzF,UADA,CADJ,CADJ;AAQH;;GAtCuBN,M;;KAAAA,M","sourcesContent":["import styles from './Launch.module.css'\nimport React, {useContext, useState} from \"react\";\n\nexport default function Launch() {\n    const [date, setDay] = useState({\n        day: \"\",\n        hour: \"\",\n        minutes: \"\",\n        seconds: \"\"\n    })\n\n    const countFunc = () => {\n         //date for counter\n    var countDownDate = new Date('Sep 10, 2020 00:00:00').getTime();\n    //current date\n    var now =  new Date().getTime();\n    //updated time\n    var distance = countDownDate - now;\n    // Time calculations for days, hours, and minutes and seconds \n    var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    var second = Math.floor((distance % (1000 * 60)) / 1000);\n    setDay({\n        day: days,\n        hour: hours,\n        minutes: minutes,\n        seconds: second\n    })\n    }\n       // Update the count down every 1 second\n    var x = setInterval(countFunc)\n\n    return (\n        <body className={styles.background}>\n            <div className={styles.timerdiv}>\n            <h2 className={styles.timer}> {date.day}days. {date.hour}hours. {date.minutes}min. {date.seconds}secs.\n            </h2>\n            </div>\n        </body>\n    )\n}"]},"metadata":{},"sourceType":"module"}